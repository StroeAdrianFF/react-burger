{"version":3,"sources":["components/Order/Checkout Summary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","console","log","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","React","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.8351b169.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.css';\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}\r\n            >Cancel</Button>\r\n\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}\r\n            >Continue</Button>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\n\r\nimport * as actions from '../../../store/actions/index'\r\n\r\nimport { connect } from 'react-redux';\r\nimport { updateObject, checkValidity } from '../../../shared/utility'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                valid: true,\r\n                validation: {}\r\n\r\n            }\r\n        },\r\n        formIsValid: false //used to see if the overall form is valid or not\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n\r\n\r\n\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        console.log(formIsValid)\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler} >\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport CheckoutSummary from '../../components/Order/Checkout Summary/CheckoutSummary'\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Checkout extends React.Component {\r\n\r\n\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>)\r\n        }\r\n        return summary\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients, //has to have the same name as the one in the reducer\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n\r\n\r\n\r\n        case ('input'): inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n\r\n\r\n\r\n\r\n        case ('textarea'): inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n\r\n\r\n\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option =>\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )}\r\n                </select>); break;\r\n\r\n\r\n\r\n\r\n        default: inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />; break;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>)\r\n}\r\n\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__16d28\",\"Label\":\"Input_Label__wY3Ax\",\"InputElement\":\"Input_InputElement__1D0Ma\",\"Invalid\":\"Input_Invalid__M15dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2ST5R\"};"],"sourceRoot":""}