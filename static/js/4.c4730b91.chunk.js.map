{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","window","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.c4730b91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1bgJc\"};","import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.module.css'\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';//to be able to connect mapDispatchToProps to this component\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        }\r\n        );\r\n        this.setState({ controls: updatedControls })\r\n    }\r\n\r\n\r\n    submitHandler = () => {\r\n        window.event.preventDefault();//PREVENT RELOADING OF THE PAGE\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\" >SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    btnType=\"Danger\"\r\n                    clicked={this.switchAuthModeHandler}>\r\n                    Switch to {this.state.isSignup ? 'Sign In' : 'Sign Up'}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {//ability to dispatch via props in this component\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n        //this is how we connect dispatch to the component","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n\r\n\r\n\r\n        case ('input'): inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n\r\n\r\n\r\n\r\n        case ('textarea'): inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n\r\n\r\n\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option =>\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )}\r\n                </select>); break;\r\n\r\n\r\n\r\n\r\n        default: inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />; break;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>)\r\n}\r\n\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__16d28\",\"Label\":\"Input_Label__wY3Ax\",\"InputElement\":\"Input_InputElement__1D0Ma\",\"Invalid\":\"Input_Invalid__M15dv\"};"],"sourceRoot":""}